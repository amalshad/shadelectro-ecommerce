<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details - ShadElectro</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/css/user-profile.css">
  <style>
    /* Order Details Specific Styles */
    .order-details-content {
      background: white;
      border-radius: 20px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      margin-left: 20px;
    }

    .order-details-header {
      background: linear-gradient(135deg, #8a2be2 0%, #9d4edd 100%);
      color: white;
      padding: 30px;
      position: relative;
      overflow: hidden;
    }

    .order-details-header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
      animation: float 6s ease-in-out infinite;
    }

    .order-header-content {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      flex-wrap: wrap;
      gap: 20px;
      position: relative;
      z-index: 1;
    }

    .order-title-section h1 {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .order-subtitle {
      opacity: 0.9;
      font-size: 1.1rem;
      margin-bottom: 15px;
    }

    .order-meta {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      font-size: 0.95rem;
    }

    .meta-item {
      display: flex;
      align-items: center;
      gap: 8px;
      background: rgba(255, 255, 255, 0.15);
      padding: 8px 15px;
      border-radius: 20px;
      backdrop-filter: blur(10px);
    }

    .order-actions-header {
      display: flex;
      flex-direction: column;
      gap: 15px;
      align-items: flex-end;
    }

    .header-amount {
      text-align: right;
    }

    .amount-main {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 5px;
    }

    .amount-saved {
      font-size: 0.9rem;
      opacity: 0.9;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .header-actions {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .header-btn {
      padding: 12px 20px;
      border-radius: 25px;
      font-weight: 600;
      font-size: 0.9rem;
      border: 2px solid rgba(255, 255, 255, 0.3);
      background: rgba(255, 255, 255, 0.15);
      color: white;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 8px;
      text-decoration: none;
      backdrop-filter: blur(10px);
    }

    .header-btn:hover {
      background: rgba(255, 255, 255, 0.25);
      border-color: rgba(255, 255, 255, 0.5);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
    }

    .header-btn.primary {
      background: rgba(255, 255, 255, 0.9);
      color: #8a2be2;
      border-color: transparent;
    }

    .header-btn.primary:hover {
      background: white;
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    }

    .order-content {
      padding: 0;
    }

    .content-section {
      padding: 30px;
      border-bottom: 1px solid #f1f3f4;
    }

    .content-section:last-child {
      border-bottom: none;
    }

    .section-title {
      font-size: 1.5rem;
      font-weight: 700;
      color: #2d3748;
      margin-bottom: 20px;
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .section-title i {
      color: #8a2be2;
      font-size: 1.3rem;
    }

    /* Status Timeline */
    .status-timeline {
      position: relative;
      padding: 20px 0;
    }

    .timeline-item {
      display: flex;
      align-items: center;
      margin-bottom: 25px;
      position: relative;
    }

    .timeline-item:last-child {
      margin-bottom: 0;
    }

    .timeline-icon {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.2rem;
      margin-right: 20px;
      position: relative;
      z-index: 2;
    }

    .timeline-icon.completed {
      background: #28a745;
      color: white;
    }

    .timeline-icon.current {
      background: #8a2be2;
      color: white;
      animation: pulse 2s infinite;
    }

    .timeline-icon.pending {
      background: #f8f9fa;
      color: #6c757d;
      border: 2px solid #e9ecef;
    }

    .timeline-content {
      flex: 1;
    }

    .timeline-title {
      font-weight: 600;
      color: #2d3748;
      margin-bottom: 5px;
    }

    .timeline-date {
      font-size: 0.85rem;
      color: #718096;
    }

    .timeline-line {
      position: absolute;
      left: 24px;
      top: 50px;
      width: 2px;
      height: calc(100% - 50px);
      background: #e9ecef;
      z-index: 1;
    }

    /* Order Items */
    .order-items-grid {
      display: grid;
      gap: 20px;
    }

    .order-item-card {
      background: #f8f9fa;
      border-radius: 15px;
      padding: 20px;
      transition: all 0.3s ease;
      border: 2px solid transparent;
    }

    .order-item-card:hover {
      background: #e9ecef;
      border-color: #8a2be2;
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(138, 43, 226, 0.1);
    }

    .item-header {
      display: flex;
      align-items: center;
      gap: 15px;
      margin-bottom: 15px;
    }

    .item-image {
      width: 80px;
      height: 80px;
      border-radius: 12px;
      object-fit: cover;
      border: 2px solid #e9ecef;
    }

    .item-info {
      flex: 1;
    }

    .item-name {
      font-weight: 600;
      color: #2d3748;
      margin-bottom: 5px;
      font-size: 1.1rem;
    }

    .item-variant {
      font-size: 0.9rem;
      color: #718096;
      margin-bottom: 5px;
    }

    .item-quantity {
      font-size: 0.9rem;
      color: #718096;
    }

    .item-price-status {
      text-align: right;
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      gap: 10px;
    }

    .item-price {
      font-weight: 700;
      color: #2d3748;
      font-size: 1.2rem;
    }

    .item-status-badge {
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 5px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .status-processing { background: #e3f2fd; color: #1976d2; }
    .status-pending { background: #fff3e0; color: #f57c00; }
    .status-shipped { background: #f3e5f5; color: #7b1fa2; }
    .status-delivered { background: #e8f5e8; color: #2e7d32; }
    .status-cancelled { background: #ffebee; color: #d32f2f; }
    .status-return-request { background: #fff3e0; color: #ef6c00; }
    .status-returned { background: #f5f5f5; color: #616161; }

    .item-actions {
      margin-top: 15px;
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }

    .item-btn {
      padding: 8px 16px;
      border-radius: 8px;
      font-weight: 600;
      font-size: 0.8rem;
      border: none;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .btn-cancel { background: #dc3545; color: white; }
    .btn-cancel:hover { background: #c82333; transform: translateY(-1px); }
    .btn-return { background: #fd7e14; color: white; }
    .btn-return:hover { background: #e8590c; transform: translateY(-1px); }
    .btn-track { background: #17a2b8; color: white; }
    .btn-track:hover { background: #138496; transform: translateY(-1px); }

    /* Address Cards */
    .address-cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
    }

    .address-card {
      background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);
      border-radius: 15px;
      padding: 20px;
      border-left: 4px solid #2196f3;
      transition: all 0.3s ease;
    }

    .address-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(33, 150, 243, 0.15);
    }

    .address-title {
      font-weight: 600;
      color: #1976d2;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 1.1rem;
    }

    .address-badge {
      background: #2196f3;
      color: white;
      padding: 4px 8px;
      border-radius: 10px;
      font-size: 0.7rem;
      font-weight: 600;
    }

    .address-details {
      color: #37474f;
      line-height: 1.6;
      font-size: 0.9rem;
    }

    /* Payment & Summary */
    .summary-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
    }

    .summary-card {
      background: #f8f9fa;
      border-radius: 15px;
      padding: 20px;
      border: 2px solid #e9ecef;
      transition: all 0.3s ease;
    }

    .summary-card:hover {
      border-color: #8a2be2;
      box-shadow: 0 8px 25px rgba(138, 43, 226, 0.1);
    }

    .summary-title {
      font-weight: 600;
      color: #2d3748;
      margin-bottom: 15px;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .summary-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
      padding: 8px 0;
    }

    .summary-item:last-child {
      margin-bottom: 0;
      padding-top: 15px;
      border-top: 2px solid #e9ecef;
      font-weight: 700;
      font-size: 1.1rem;
    }

    .summary-label {
      color: #718096;
    }

    .summary-value {
      font-weight: 600;
      color: #2d3748;
    }

    .summary-value.total {
      color: #8a2be2;
      font-size: 1.2rem;
    }

    .payment-method {
      display: flex;
      align-items: center;
      gap: 10px;
      padding: 15px;
      background: white;
      border-radius: 10px;
      border: 2px solid #e9ecef;
      margin-top: 10px;
    }

    .payment-icon {
      width: 40px;
      height: 40px;
      background: #8a2be2;
      color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .payment-info {
      flex: 1;
    }

    .payment-name {
      font-weight: 600;
      color: #2d3748;
    }

    .payment-status {
      font-size: 0.85rem;
      color: #718096;
    }

    /* Invoice Section */
    .invoice-section {
      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
      border-radius: 15px;
      padding: 25px;
      text-align: center;
      border: 2px dashed #8a2be2;
    }

    .invoice-icon {
      width: 80px;
      height: 80px;
      background: linear-gradient(135deg, #8a2be2, #9d4edd);
      color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 20px;
      font-size: 2rem;
    }

    .invoice-title {
      font-size: 1.3rem;
      font-weight: 700;
      color: #2d3748;
      margin-bottom: 10px;
    }

    .invoice-description {
      color: #718096;
      margin-bottom: 20px;
    }

    .download-btn {
      padding: 15px 30px;
      background: linear-gradient(135deg, #8a2be2, #9d4edd);
      color: white;
      border: none;
      border-radius: 25px;
      font-weight: 600;
      font-size: 1rem;
      cursor: pointer;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 10px;
      text-decoration: none;
    }

    .download-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(138, 43, 226, 0.3);
    }

    .download-btn:active {
      transform: translateY(0);
    }

    /* Return Modal Styles */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.6);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      backdrop-filter: blur(5px);
    }

    .modal-overlay.active {
      opacity: 1;
      visibility: visible;
    }

    .return-modal,
    .cancel-modal {
      background: white;
      border-radius: 20px;
      padding: 0;
      max-width: 500px;
      width: 90%;
      max-height: 90vh;
      overflow-y: auto;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
      transform: scale(0.9) translateY(20px);
      transition: all 0.3s ease;
    }

    .modal-overlay.active .return-modal,
    .modal-overlay.active .cancel-modal {
      transform: scale(1) translateY(0);
    }

    .modal-header {
      background: linear-gradient(135deg, #fd7e14, #e8590c);
      color: white;
      padding: 25px 30px;
      border-radius: 20px 20px 0 0;
      position: relative;
      overflow: hidden;
    }

    /* Cancel Modal Specific Header */
    #cancelModal .modal-header {
      background: linear-gradient(135deg, #dc3545, #c82333);
    }

    .modal-header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
      animation: float 6s ease-in-out infinite;
    }

    .modal-header-content {
      position: relative;
      z-index: 1;
    }

    .modal-title {
      font-size: 1.5rem;
      font-weight: 700;
      margin-bottom: 8px;
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .modal-subtitle {
      opacity: 0.9;
      font-size: 0.95rem;
    }

    .modal-close {
      position: absolute;
      top: 20px;
      right: 20px;
      background: rgba(255, 255, 255, 0.2);
      border: none;
      color: white;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.2rem;
      transition: all 0.3s ease;
      z-index: 2;
    }

    .modal-close:hover {
      background: rgba(255, 255, 255, 0.3);
      transform: rotate(90deg);
    }

    .modal-body {
      padding: 30px;
    }

    .form-group {
      margin-bottom: 25px;
    }

    .form-label {
      display: block;
      font-weight: 600;
      color: #2d3748;
      margin-bottom: 10px;
      font-size: 1rem;
    }

    .form-label.required::after {
      content: ' *';
      color: #e53e3e;
    }

    .reason-options {
      display: grid;
      gap: 12px;
    }

    .reason-option {
      position: relative;
    }

    .reason-option input[type="radio"] {
      position: absolute;
      opacity: 0;
      cursor: pointer;
    }

    .reason-option label {
      display: flex;
      align-items: center;
      padding: 15px 20px;
      background: #f8f9fa;
      border: 2px solid #e9ecef;
      border-radius: 12px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-weight: 500;
      color: #2d3748;
    }

    .reason-option label:hover {
      background: #e9ecef;
      border-color: #fd7e14;
    }

    .reason-option input[type="radio"]:checked + label {
      background: #fff3e0;
      border-color: #fd7e14;
      color: #e8590c;
    }

    .reason-option label::before {
      content: '';
      width: 20px;
      height: 20px;
      border: 2px solid #e9ecef;
      border-radius: 50%;
      margin-right: 12px;
      transition: all 0.3s ease;
      flex-shrink: 0;
    }

    .reason-option input[type="radio"]:checked + label::before {
      background: #fd7e14;
      border-color: #fd7e14;
      box-shadow: inset 0 0 0 3px white;
    }

    .reason-icon {
      margin-left: auto;
      font-size: 1.1rem;
      opacity: 0.6;
    }

    .reason-option input[type="radio"]:checked + label .reason-icon {
      opacity: 1;
      color: #e8590c;
    }

    .form-textarea {
      width: 100%;
      min-height: 100px;
      padding: 15px;
      border: 2px solid #e9ecef;
      border-radius: 12px;
      font-family: inherit;
      font-size: 0.95rem;
      resize: vertical;
      transition: all 0.3s ease;
      background: #f8f9fa;
    }

    .form-textarea:focus {
      outline: none;
      border-color: #fd7e14;
      background: white;
      box-shadow: 0 0 0 3px rgba(253, 126, 20, 0.1);
    }

    .form-textarea::placeholder {
      color: #a0aec0;
    }

    .modal-actions {
      display: flex;
      gap: 15px;
      justify-content: flex-end;
      padding-top: 20px;
      border-top: 1px solid #e9ecef;
    }

    .modal-btn {
      padding: 12px 25px;
      border-radius: 10px;
      font-weight: 600;
      font-size: 0.95rem;
      cursor: pointer;
      transition: all 0.3s ease;
      border: none;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .modal-btn.secondary {
      background: #f8f9fa;
      color: #6c757d;
      border: 2px solid #e9ecef;
    }

    .modal-btn.secondary:hover {
      background: #e9ecef;
      border-color: #6c757d;
    }

    .modal-btn.primary {
      background: linear-gradient(135deg, #fd7e14, #e8590c);
      color: white;
    }

    .modal-btn.primary:hover {
      background: linear-gradient(135deg, #e8590c, #d63384);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(253, 126, 20, 0.3);
    }

    .modal-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none !important;
    }

    .item-info-card {
      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 25px;
      border: 2px solid #e9ecef;
    }

    .item-info-header {
      display: flex;
      align-items: center;
      gap: 15px;
      margin-bottom: 15px;
    }

    .item-info-image {
      width: 60px;
      height: 60px;
      border-radius: 10px;
      object-fit: cover;
      border: 2px solid #dee2e6;
    }

    .item-info-details h4 {
      font-weight: 600;
      color: #2d3748;
      margin-bottom: 5px;
    }

    .item-info-details p {
      color: #718096;
      font-size: 0.9rem;
      margin: 0;
    }

    .item-info-price {
      font-weight: 700;
      color: #fd7e14;
      font-size: 1.1rem;
      margin-left: auto;
    }

    /* Cancel Warning */
    .cancel-warning {
      display: flex;
      align-items: flex-start;
      gap: 8px;
      font-size: 0.9rem;
      background: #fff3cd;
      border: 1px solid #ffeaa7;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 20px;
    }

    .cancel-warning strong {
      color: #856404;
    }

    .cancel-warning i {
      color: #856404;
      margin-right: 8px;
    }

    /* Animations */
    @keyframes float {
      0%, 100% { transform: translateY(0px) rotate(0deg); }
      50% { transform: translateY(-10px) rotate(5deg); }
    }

    @keyframes pulse {
      0% { box-shadow: 0 0 0 0 rgba(138, 43, 226, 0.7); }
      70% { box-shadow: 0 0 0 10px rgba(138, 43, 226, 0); }
      100% { box-shadow: 0 0 0 0 rgba(138, 43, 226, 0); }
    }

    .animate-fade-in-up {
      opacity: 0;
      transform: translateY(30px);
      animation: fadeInUp 0.8s ease forwards;
    }

    @keyframes fadeInUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* Toast Styles */
    .toast {
      position: fixed;
      top: 20px;
      right: 20px;
      background: white;
      border-radius: 15px;
      padding: 20px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
      z-index: 1001;
      transform: translateX(400px);
      transition: transform 0.3s ease;
      border-left: 4px solid #28a745;
      max-width: 350px;
    }

    .toast.show {
      transform: translateX(0);
    }

    .toast.error {
      border-left-color: #dc3545;
    }

    .toast-content {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .toast-icon {
      font-size: 1.2rem;
    }

    .toast-message {
      font-weight: 600;
      color: #2d3748;
    }

    /* Enhanced Invoice Styles */
    .invoice-btn {
      background: linear-gradient(135deg, #28a745, #20c997) !important;
      border: none !important;
      font-size: 1rem !important;
      padding: 15px 25px !important;
      box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
    }

    .invoice-btn:hover {
      background: linear-gradient(135deg, #218838, #1ea085) !important;
      transform: translateY(-3px) !important;
      box-shadow: 0 8px 25px rgba(40, 167, 69, 0.4) !important;
    }

    .order-level-actions {
      margin-top: 30px;
      padding-top: 25px;
      border-top: 2px solid #f1f3f4;
    }

    .action-buttons-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      gap: 15px;
      margin-top: 20px;
    }

    .action-buttons-grid .action-btn {
      justify-content: center;
      padding: 12px 20px;
      font-weight: 600;
      border-radius: 12px;
      transition: all 0.3s ease;
    }

    .btn-secondary {
      background: #6c757d;
      color: white;
    }

    .btn-secondary:hover {
      background: #5a6268;
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(108, 117, 125, 0.3);
    }

    /* Invoice Options Grid */
    .invoice-options-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }

    .invoice-option-card {
      background: white;
      border-radius: 20px;
      padding: 30px;
      text-align: center;
      border: 2px solid #e9ecef;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .invoice-option-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 4px;
      transition: all 0.3s ease;
    }

    .invoice-option-card.primary::before {
      background: linear-gradient(135deg, #28a745, #20c997);
    }

    .invoice-option-card.secondary::before {
      background: linear-gradient(135deg, #17a2b8, #20c997);
    }

    .invoice-option-card.tertiary::before {
      background: linear-gradient(135deg, #6c757d, #495057);
    }

    .invoice-option-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
    }

    .invoice-option-card:hover::before {
      height: 100%;
      opacity: 0.05;
    }

    .invoice-option-card .invoice-icon {
      width: 70px;
      height: 70px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 20px;
      font-size: 1.8rem;
      color: white;
    }

    .invoice-option-card.primary .invoice-icon {
      background: linear-gradient(135deg, #28a745, #20c997);
    }

    .invoice-option-card.secondary .invoice-icon {
      background: linear-gradient(135deg, #17a2b8, #20c997);
    }

    .invoice-option-card.tertiary .invoice-icon {
      background: linear-gradient(135deg, #6c757d, #495057);
    }

    .invoice-option-card .invoice-title {
      font-size: 1.2rem;
      font-weight: 700;
      color: #2d3748;
      margin-bottom: 10px;
    }

    .invoice-option-card .invoice-description {
      color: #718096;
      margin-bottom: 25px;
      line-height: 1.5;
    }

    .download-btn.primary {
      background: linear-gradient(135deg, #28a745, #20c997);
    }

    .download-btn.primary:hover {
      background: linear-gradient(135deg, #218838, #1ea085);
    }

    .download-btn.secondary {
      background: linear-gradient(135deg, #17a2b8, #20c997);
    }

    .download-btn.secondary:hover {
      background: linear-gradient(135deg, #138496, #1ea085);
    }

    .download-btn.tertiary {
      background: linear-gradient(135deg, #6c757d, #495057);
    }

    .download-btn.tertiary:hover {
      background: linear-gradient(135deg, #5a6268, #3d4142);
    }

    /* Invoice Details Card */
    .invoice-details-card {
      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
      border-radius: 15px;
      padding: 25px;
      border: 2px solid #dee2e6;
    }

    .invoice-meta {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
    }

    .meta-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 0;
      border-bottom: 1px solid #dee2e6;
    }

    .meta-row:last-child {
      border-bottom: none;
      font-weight: 700;
      font-size: 1.1rem;
    }

    .meta-label {
      color: #6c757d;
      font-weight: 500;
    }

    .meta-value {
      color: #2d3748;
      font-weight: 600;
    }

    .meta-value.total {
      color: #28a745;
      font-size: 1.2rem;
    }

    /* Retry Payment Button Styles */
    .btn-warning {
      background: linear-gradient(135deg, #ff6b35, #f7931e);
      color: white;
      border: none;
    }

    .btn-warning:hover {
      background: linear-gradient(135deg, #e55a2b, #e8851a);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(255, 107, 53, 0.3);
    }

    /* Loading state for retry button */
    .btn-loading {
      opacity: 0.7;
      cursor: not-allowed;
      pointer-events: none;
    }

    .btn-loading i {
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Payment retry modal styles */
    .payment-retry-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.6);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      backdrop-filter: blur(5px);
    }

    .payment-retry-modal.active {
      opacity: 1;
      visibility: visible;
    }

    .payment-retry-content {
      background: white;
      border-radius: 20px;
      padding: 30px;
      max-width: 400px;
      width: 90%;
      text-align: center;
      transform: scale(0.9) translateY(20px);
      transition: all 0.3s ease;
    }

    .payment-retry-modal.active .payment-retry-content {
      transform: scale(1) translateY(0);
    }

    /* ============== RESPONSIVE CSS ADDITIONS ============== */

    /* Tablet responsive (768px and below) */
    @media (max-width: 768px) {
      .profile-layout {
        display: block;
      }

      .sidebar {
        margin-bottom: 20px;
      }

      .order-details-content {
        margin-left: 0;
        margin-top: 20px;
        border-radius: 15px;
      }

      .order-details-header {
        padding: 20px;
      }

      .order-header-content {
        flex-direction: column;
        align-items: flex-start;
        gap: 20px;
      }

      .order-title-section h1 {
        font-size: 2rem;
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
      }

      .order-subtitle {
        font-size: 1rem;
      }

      .order-meta {
        gap: 10px;
      }

      .meta-item {
        padding: 6px 12px;
        font-size: 0.85rem;
      }

      .order-actions-header {
        align-items: flex-start;
        width: 100%;
      }

      .header-amount {
        text-align: left;
      }

      .amount-main {
        font-size: 2rem;
      }

      .header-actions {
        width: 100%;
        justify-content: flex-start;
        flex-wrap: wrap;
      }

      .header-btn {
        font-size: 0.8rem;
        padding: 10px 16px;
      }

      .content-section {
        padding: 20px;
      }

      .section-title {
        font-size: 1.3rem;
        margin-bottom: 15px;
      }

      .section-title i {
        font-size: 1.1rem;
      }

      .timeline-icon {
        width: 40px;
        height: 40px;
        font-size: 1rem;
        margin-right: 15px;
      }

      .timeline-line {
        left: 19px;
        top: 40px;
      }

      .timeline-title {
        font-size: 0.9rem;
      }

      .timeline-date {
        font-size: 0.8rem;
      }

      .item-header {
        flex-direction: column;
        text-align: center;
        gap: 10px;
      }

      .item-image {
        width: 60px;
        height: 60px;
        margin: 0 auto;
      }

      .item-info {
        text-align: left;
      }

      .item-name {
        font-size: 1rem;
      }

      .item-variant,
      .item-quantity {
        font-size: 0.8rem;
      }

      .item-price-status {
        align-items: center;
        text-align: center;
      }

      .item-price {
        font-size: 1.1rem;
      }

      .item-actions {
        justify-content: center;
        flex-wrap: wrap;
      }

      .item-btn {
        font-size: 0.75rem;
        padding: 6px 12px;
      }

      .address-cards {
        grid-template-columns: 1fr;
      }

      .address-card {
        padding: 15px;
      }

      .address-title {
        font-size: 1rem;
        flex-wrap: wrap;
      }

      .address-details {
        font-size: 0.85rem;
      }

      .summary-grid {
        grid-template-columns: 1fr;
      }

      .summary-card {
        padding: 15px;
      }

      .payment-method {
        padding: 12px;
        flex-wrap: wrap;
        text-align: center;
      }

      .payment-icon {
        width: 35px;
        height: 35px;
      }

      .invoice-options-grid {
        grid-template-columns: 1fr;
      }

      .invoice-option-card {
        padding: 20px;
      }

      .invoice-option-card .invoice-icon {
        width: 60px;
        height: 60px;
        font-size: 1.5rem;
      }

      .invoice-option-card .invoice-title {
        font-size: 1.1rem;
      }

      .download-btn {
        padding: 12px 20px;
        font-size: 0.9rem;
      }

      .invoice-details-card {
        padding: 20px;
      }

      .invoice-meta {
        grid-template-columns: 1fr;
      }

      .action-buttons-grid {
        grid-template-columns: 1fr;
        gap: 10px;
      }

      .return-modal,
      .cancel-modal {
        width: 95%;
        margin: 20px;
      }

      .modal-header {
        padding: 20px;
      }

      .modal-title {
        font-size: 1.3rem;
      }

      .modal-close {
        width: 35px;
        height: 35px;
        top: 15px;
        right: 15px;
      }

      .modal-body {
        padding: 20px;
      }

      .modal-actions {
        flex-direction: column;
        gap: 10px;
      }

      .modal-btn {
        width: 100%;
        justify-content: center;
      }

      .item-info-header {
        flex-direction: column;
        text-align: center;
      }

      .item-info-image {
        width: 50px;
        height: 50px;
      }

      .item-info-price {
        margin-left: 0;
      }
    }

    /* Mobile responsive (480px and below) */
    @media (max-width: 480px) {
      .profile-container {
        padding: 10px;
      }

      .breadcrumb {
        font-size: 12px;
        margin-bottom: 15px;
        flex-wrap: wrap;
      }

      .breadcrumb .breadcrumb-link span {
        display: none;
      }

      .order-details-header {
        padding: 15px;
      }

      .order-title-section h1 {
        font-size: 1.5rem;
      }

      .order-subtitle {
        font-size: 0.9rem;
      }

      .meta-item {
        padding: 4px 8px;
        font-size: 0.8rem;
      }

      .amount-main {
        font-size: 1.5rem;
      }

      .header-btn {
        font-size: 0.75rem;
        padding: 8px 12px;
        width: 100%;
        justify-content: center;
        margin-bottom: 5px;
      }

      .content-section {
        padding: 15px;
      }

      .section-title {
        font-size: 1.1rem;
        margin-bottom: 12px;
      }

      .timeline-icon {
        width: 35px;
        height: 35px;
        font-size: 0.9rem;
        margin-right: 10px;
      }

      .timeline-line {
        left: 16px;
        top: 35px;
      }

      .timeline-title {
        font-size: 0.85rem;
      }

      .timeline-date {
        font-size: 0.75rem;
      }

      .order-item-card {
        padding: 15px;
      }

      .item-image {
        width: 50px;
        height: 50px;
      }

      .item-name {
        font-size: 0.9rem;
      }

      .item-variant,
      .item-quantity {
        font-size: 0.75rem;
      }

      .item-price {
        font-size: 1rem;
      }

      .item-status-badge {
        font-size: 0.7rem;
        padding: 4px 8px;
      }

      .address-card {
        padding: 12px;
      }

      .address-title {
        font-size: 0.9rem;
      }

      .address-details {
        font-size: 0.8rem;
      }

      .summary-card {
        padding: 12px;
      }

      .summary-title {
        font-size: 0.95rem;
      }

      .summary-item {
        font-size: 0.85rem;
        padding: 6px 0;
      }

      .payment-method {
        padding: 10px;
        flex-direction: column;
        text-align: center;
      }

      .invoice-option-card {
        padding: 15px;
      }

      .invoice-option-card .invoice-icon {
        width: 50px;
        height: 50px;
        font-size: 1.3rem;
      }

      .invoice-option-card .invoice-title {
        font-size: 1rem;
      }

      .invoice-option-card .invoice-description {
        font-size: 0.85rem;
      }

      .download-btn {
        padding: 10px 16px;
        font-size: 0.8rem;
      }

      .modal-title {
        font-size: 1.1rem;
      }

      .modal-subtitle {
        font-size: 0.85rem;
      }

      .reason-option label {
        padding: 12px 15px;
        font-size: 0.85rem;
      }

      .reason-option label::before {
        width: 18px;
        height: 18px;
      }

      .form-textarea {
        min-height: 80px;
        padding: 12px;
        font-size: 0.85rem;
      }

      .toast {
        right: 10px;
        left: 10px;
        width: auto;
        min-width: auto;
        max-width: none;
      }

      .toast-content {
        flex-direction: column;
        text-align: center;
        gap: 8px;
      }

      .toast-message {
        font-size: 0.9rem;
      }

      .toast .toast-icon {
        font-size: 1.5rem;
      }

      /* Make touch targets larger on mobile */
      .item-btn,
      .modal-btn,
      .header-btn,
      .download-btn {
        min-height: 44px;
      }

      /* Improve text input on mobile */
      .form-textarea,
      input[type="text"],
      input[type="email"] {
        font-size: 16px; /* Prevents zoom on iOS */
      }
    }

    /* Large screens */
    @media (min-width: 1200px) {
      .order-details-content {
        margin-left: 30px;
      }

      .order-details-header {
        padding: 40px;
      }

      .content-section {
        padding: 40px;
      }

      .invoice-options-grid {
        grid-template-columns: repeat(2, 1fr);
      }

      .modal-overlay {
        padding: 40px;
      }

      .return-modal,
      .cancel-modal {
        width: 500px;
      }
    }

    /* Print styles */
    @media print {
      .modal-overlay,
      .breadcrumb,
      .header-actions,
      .item-actions,
      .action-buttons-grid {
        display: none !important;
      }

      .order-details-content {
        margin-left: 0;
        box-shadow: none;
      }

      .order-details-header {
        background: #f8f9fa !important;
        color: #2d3748 !important;
      }

      .content-section {
        break-inside: avoid;
        border-bottom: 1px solid #e9ecef !important;
      }
    }

    /* High contrast mode */
    @media (prefers-contrast: high) {
      .order-item-card {
        border: 2px solid #000;
      }

      .item-status-badge {
        border: 1px solid currentColor;
      }

      .modal-overlay {
        background: rgba(0, 0, 0, 0.8);
      }
    }

    /* Reduced motion */
    @media (prefers-reduced-motion: reduce) {
      * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
      }

      .animate-fade-in-up {
        opacity: 1 !important;
        transform: none !important;
      }
    }
  </style>
</head>

<body>
  <!-- Header Include -->
  <%- include("../partials/user/header") %>

  <div class="profile-container">
    <!-- Breadcrumb -->
    <div class="breadcrumb animate-fade-in-up">
      <a href="/" class="breadcrumb-link">
        <i class="fas fa-home"></i>
        <span>Home</span>
      </a>
      <span class="breadcrumb-separator">
        <i class="fas fa-chevron-right"></i>
      </span>
      <a href="/profile" class="breadcrumb-link">
        <span>Account</span>
      </a>
      <span class="breadcrumb-separator">
        <i class="fas fa-chevron-right"></i>
      </span>
      <a href="/orders" class="breadcrumb-link">
        <span>Orders</span>
      </a>
      <span class="breadcrumb-separator">
        <i class="fas fa-chevron-right"></i>
      </span>
      <span class="breadcrumb-current">Order Details</span>
    </div>

    <div class="profile-layout">
      <!-- Sidebar Navigation -->
      <%- include("../partials/user/sidebar", { currentPage: 'orders' }) %>

      <!-- Order Details Content -->
      <div class="order-details-content animate-fade-in-up">
        <!-- Order Header -->
        <div class="order-details-header">
          <div class="order-header-content">
            <div class="order-title-section">
              <h1>
                <i class="fas fa-receipt"></i>
                Order #<%= order.orderId.substring(0, 8).toUpperCase() %>
              </h1>
              <p class="order-subtitle">Complete order details and tracking information</p>
              <div class="order-meta">
                <div class="meta-item">
                  <i class="fas fa-calendar"></i>
                  Placed on <%= new Date(order.createdOn).toLocaleDateString('en-IN', { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                  }) %>
                </div>
                <div class="meta-item">
                  <i class="fas fa-credit-card"></i>
                  <%= order.paymentMethod %>
                </div>
                <div class="meta-item">
                  <i class="fas fa-box"></i>
                  <%= order.orderedItems.length %> Item<%= order.orderedItems.length > 1 ? 's' : '' %>
                </div>
              </div>
            </div>
            
            <div class="order-actions-header">
              <div class="header-amount">
                <div class="amount-main">₹<%= order.finalAmount.toFixed(2) %></div>
                <% if (order.discount > 0) { %>
                  <div class="amount-saved">
                    <i class="fas fa-tag"></i>
                    You saved ₹<%= order.discount.toFixed(2) %>
                  </div>
                <% } %>
              </div>
              
              <div class="header-actions">
                <!-- Make Download Invoice more prominent -->
                <% if (order.status === 'Delivered' || order.paymentStatus === 'Paid' || ['Processing', 'Shipped'].includes(order.status)) { %>
                  <a href="/orderInvoice/<%= order._id %>" class="header-btn primary invoice-btn" target="_blank">
                    <i class="fas fa-file-invoice"></i>
                    Download Invoice
                  </a>
                <% } %>
                
                <button class="header-btn" onclick="emailInvoice('<%= order._id %>')">
                  <i class="fas fa-envelope"></i>
                  Email Invoice
                </button>
                
                <a href="/orders" class="header-btn">
                  <i class="fas fa-arrow-left"></i>
                  Back to Orders
                </a>
              </div>
            </div>
          </div>
        </div>

        <!-- Order Content -->
        <div class="order-content">
          <!-- Order Status Timeline -->
          <div class="content-section">
            <h2 class="section-title">
              <i class="fas fa-route"></i>
              Order Status & Timeline
            </h2>
            
            <div class="status-timeline">
              <div class="timeline-line"></div>
              
              <div class="timeline-item">
                <div class="timeline-icon completed">
                  <i class="fas fa-check"></i>
                </div>
                <div class="timeline-content">
                  <div class="timeline-title">Order Placed</div>
                  <div class="timeline-date">
                    <%= new Date(order.createdOn).toLocaleDateString('en-IN', { 
                      year: 'numeric', 
                      month: 'long', 
                      day: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                    }) %>
                  </div>
                </div>
              </div>
              
              <div class="timeline-item">
                <div class="timeline-icon <%= ['Processing', 'Pending', 'Shipped', 'Delivered'].includes(order.status) ? 'completed' : 'pending' %>">
                  <i class="fas fa-cog"></i>
                </div>
                <div class="timeline-content">
                  <div class="timeline-title">Order Confirmed</div>
                  <div class="timeline-date">
                    <% if (['Processing', 'Pending', 'Shipped', 'Delivered'].includes(order.status)) { %>
                      <%= new Date(order.createdOn).toLocaleDateString('en-IN', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                      }) %>
                    <% } else { %>
                      Pending confirmation
                    <% } %>
                  </div>
                </div>
              </div>
              
              <div class="timeline-item">
                <div class="timeline-icon <%= order.status === 'Shipped' ? 'current' : ['Delivered'].includes(order.status) ? 'completed' : 'pending' %>">
                  <i class="fas fa-truck"></i>
                </div>
                <div class="timeline-content">
                  <div class="timeline-title">Order Shipped</div>
                  <div class="timeline-date">
                    <% if (['Shipped', 'Delivered'].includes(order.status)) { %>
                      Estimated: <%= new Date(Date.now() + 2*24*60*60*1000).toLocaleDateString('en-IN', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric'
                      }) %>
                    <% } else { %>
                      Estimated shipping date
                    <% } %>
                  </div>
                </div>
              </div>
              
              <div class="timeline-item">
                <div class="timeline-icon <%= order.status === 'Delivered' ? 'completed' : 'pending' %>">
                  <i class="fas fa-home"></i>
                </div>
                <div class="timeline-content">
                  <div class="timeline-title">Order Delivered</div>
                  <div class="timeline-date">
                    <% if (order.status === 'Delivered') { %>
                      Delivered successfully
                    <% } else { %>
                      Estimated: <%= new Date(Date.now() + 5*24*60*60*1000).toLocaleDateString('en-IN', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric'
                      }) %>
                    <% } %>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Order Items -->
          <div class="content-section">
            <h2 class="section-title">
              <i class="fas fa-shopping-bag"></i>
              Order Items (<%= order.orderedItems.length %>)
            </h2>
            
            <div class="order-items-grid">
              <% order.orderedItems.forEach((item, itemIndex) => { %>
                <div class="order-item-card">
                  <div class="item-header">
                    <% if (item.product && item.product.variants && item.product.variants[item.variantIndex]) { %>
                      <img src="/uploads/productImages/<%= item.product.variants[item.variantIndex].productImage[0] %>" 
                           alt="<%= item.product.productName %>" 
                           class="item-image">
                    <% } else { %>
                      <div class="item-image" style="background: #f1f3f4; display: flex; align-items: center; justify-content: center;">
                        <i class="fas fa-image" style="color: #718096; font-size: 1.5rem;"></i>
                      </div>
                    <% } %>
                    
                    <div class="item-info">
                      <div class="item-name">
                        <%= item.product ? item.product.productName : 'Product Not Found' %>
                      </div>
                      <% if (item.product && item.product.variants && item.product.variants[item.variantIndex]) { %>
                        <div class="item-variant">
                          Variant: <%= item.product.variants[item.variantIndex].type %>
                        </div>
                      <% } %>
                      <div class="item-quantity">
                        Quantity: <%= item.quantity %> × ₹<%= item.price.toFixed(2) %>
                      </div>
                    </div>
                    
                    <div class="item-price-status">
                      <div class="item-price">₹<%= (item.quantity * item.price).toFixed(2) %></div>
                      <span class="item-status-badge status-<%= item.status.toLowerCase().replace(' ', '-') %>">
                        <i class="<%= getStatusIcon(item.status) %>"></i>
                        <%= item.status %>
                      </span>
                    </div>
                  </div>
                  
                  <div class="item-actions">
                    <% if (['Processing', 'Pending'].includes(item.status)) { %>
                      <button class="item-btn btn-cancel" onclick="cancelItem('<%= order._id %>', '<%= itemIndex %>')">
                        <i class="fas fa-times"></i>
                        Cancel Item
                      </button>
                    <% } %>
                    
                    <% if (item.status === 'Delivered') { %>
                      <button class="item-btn btn-return" onclick="openReturnModal('<%= order._id %>', '<%= itemIndex %>', 'item')">
                        <i class="fas fa-undo"></i>
                        Return Item
                      </button>
                    <% } %>
                  </div>
                </div>
              <% }) %>
            </div>
          </div>

          <!-- Shipping & Billing Address -->
          <div class="content-section">
            <h2 class="section-title">
              <i class="fas fa-map-marker-alt"></i>
              Shipping & Billing Information
            </h2>
            
            <div class="address-cards">
              <div class="address-card">
                <div class="address-title">
                  <i class="fas fa-truck"></i>
                  Shipping Address
                  <% if (order.shippingAddress.addressTitle) { %>
                    <span class="address-badge"><%= order.shippingAddress.addressTitle %></span>
                  <% } %>
                </div>
                <div class="address-details">
                  <%= order.shippingAddress.address %>
                  <% if (order.shippingAddress.landMark) { %>, <%= order.shippingAddress.landMark %><% } %><br>
                  <%= order.shippingAddress.city %>, <%= order.shippingAddress.state %> <%= order.shippingAddress.pinCode %><br>
                  <%= order.shippingAddress.country %>
                  <% if (order.shippingAddress.phone) { %>
                    <br><i class="fas fa-phone"></i> <%= order.shippingAddress.phone %>
                  <% } %>
                </div>
              </div>
              
              <div class="address-card">
                <div class="address-title">
                  <i class="fas fa-file-invoice"></i>
                  Billing Address
                </div>
                <div class="address-details">
                  Same as shipping address
                </div>
              </div>
            </div>
          </div>

          <!-- Payment & Order Summary -->
          <div class="content-section">
            <h2 class="section-title">
              <i class="fas fa-credit-card"></i>
              Payment & Order Summary
            </h2>
            
            <div class="summary-grid">
              <div class="summary-card">
                <div class="summary-title">
                  <i class="fas fa-wallet"></i>
                  Payment Information
                </div>
                
                <div class="payment-method">
                  <div class="payment-icon">
                    <i class="fas fa-credit-card"></i>
                  </div>
                  <div class="payment-info">
                    <div class="payment-name"><%= order.paymentMethod %></div>
                    <div class="payment-status">Status: <%= order.paymentStatus %></div>
                  </div>
                </div>
              </div>
              
              <div class="summary-card">
                <div class="summary-title">
                  <i class="fas fa-calculator"></i>
                  Order Summary
                </div>
                
                <div class="summary-item">
                  <span class="summary-label">Subtotal (<%= order.orderedItems.length %> items)</span>
                  <span class="summary-value">₹<%= order.totalPrice.toFixed(2) %></span>
                </div>
                
                <div class="summary-item">
                  <span class="summary-label">Shipping</span>
                  <span class="summary-value">
                    <% if (order.shippingPrice === 'free' || order.shippingPrice === '0') { %>
                      Free
                    <% } else { %>
                      ₹<%= parseFloat(order.shippingPrice || 0).toFixed(2) %>
                    <% } %>
                  </span>
                </div>
                
                <% if (order.discount > 0) { %>
                  <div class="summary-item">
                    <span class="summary-label">Discount</span>
                    <span class="summary-value" style="color: #28a745;">-₹<%= order.discount.toFixed(2) %></span>
                  </div>
                <% } %>
                
                <div class="summary-item">
                  <span class="summary-label">Total Amount</span>
                  <span class="summary-value total">₹<%= order.finalAmount.toFixed(2) %></span>
                </div>
              </div>
            </div>
          </div>

          <!-- Enhanced Invoice Download Section -->
          <% if (order.status === 'Delivered' || order.paymentStatus === 'Paid' || ['Processing', 'Shipped'].includes(order.status)) { %>
            <div class="content-section">
              <h2 class="section-title">
                <i class="fas fa-file-invoice"></i>
                Invoice & Documentation
              </h2>
              
              <div class="invoice-options-grid">
                <!-- Download Invoice Card -->
                <div class="invoice-option-card primary">
                  <div class="invoice-icon">
                    <i class="fas fa-file-pdf"></i>
                  </div>
                  <h3 class="invoice-title">Download PDF Invoice</h3>
                  <p class="invoice-description">
                    Get your official invoice in PDF format. Perfect for expense reports and record keeping.
                  </p>
                  <a href="/orderInvoice/<%= order._id %>" class="download-btn primary" target="_blank">
                    <i class="fas fa-download"></i>
                    Download PDF
                  </a>
                </div>
                
                <!-- Email Invoice Card -->
                <div class="invoice-option-card secondary">
                  <div class="invoice-icon">
                    <i class="fas fa-envelope"></i>
                  </div>
                  <h3 class="invoice-title">Email Invoice</h3>
                  <p class="invoice-description">
                    Send the invoice directly to your email address for easy access and sharing.
                  </p>
                  <button onclick="emailInvoice('<%= order._id %>')" class="download-btn secondary">
                    <i class="fas fa-paper-plane"></i>
                    Send Email
                  </button>
                </div>
              </div>
              
              <!-- Invoice Details -->
              <div class="invoice-details-card">
                <div class="invoice-meta">
                  <div class="meta-row">
                    <span class="meta-label">Invoice Number:</span>
                    <span class="meta-value">INV-<%= order.orderId.substring(0, 8).toUpperCase() %></span>
                  </div>
                  <div class="meta-row">
                    <span class="meta-label">Invoice Date:</span>
                    <span class="meta-value">
                      <%= new Date(order.createdOn).toLocaleDateString('en-IN', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric' 
                      }) %>
                    </span>
                  </div>
                  <div class="meta-row">
                    <span class="meta-label">Due Date:</span>
                    <span class="meta-value">Paid</span>
                  </div>
                  <div class="meta-row">
                    <span class="meta-label">Total Amount:</span>
                    <span class="meta-value total">₹<%= order.finalAmount.toFixed(2) %></span>
                  </div>
                </div>
              </div>
            </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>

  <!-- Return Modal -->
  <div class="modal-overlay" id="returnModal">
    <div class="return-modal">
      <div class="modal-header">
        <div class="modal-header-content">
          <h2 class="modal-title">
            <i class="fas fa-undo"></i>
            Return Request
          </h2>
          <p class="modal-subtitle">Please provide a reason for your return request</p>
        </div>
        <button class="modal-close" onclick="closeReturnModal()">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div class="modal-body">
        <!-- Item Information Card -->
        <div class="item-info-card" id="returnItemInfo" style="display: none;">
          <div class="item-info-header">
            <img id="returnItemImage" src="/placeholder.svg" alt="" class="item-info-image">
            <div class="item-info-details">
              <h4 id="returnItemName"></h4>
              <p id="returnItemVariant"></p>
              <p id="returnItemQuantity"></p>
            </div>
            <div class="item-info-price" id="returnItemPrice"></div>
          </div>
        </div>

        <form id="returnForm">
          <!-- Return Reason Selection -->
          <div class="form-group">
            <label class="form-label required">Select Return Reason</label>
            <div class="reason-options">
              <div class="reason-option">
                <input type="radio" id="reason1" name="returnReason" value="Item damaged">
                <label for="reason1">
                  Item damaged
                  <i class="fas fa-exclamation-triangle reason-icon"></i>
                </label>
              </div>
              
              <div class="reason-option">
                <input type="radio" id="reason2" name="returnReason" value="Not expected">
                <label for="reason2">
                  Not as expected
                  <i class="fas fa-times-circle reason-icon"></i>
                </label>
              </div>
              
              <div class="reason-option">
                <input type="radio" id="reason3" name="returnReason" value="Size issue">
                <label for="reason3">
                  Size issue
                  <i class="fas fa-ruler reason-icon"></i>
                </label>
              </div>
              
              <div class="reason-option">
                <input type="radio" id="reason4" name="returnReason" value="Quality issue">
                <label for="reason4">
                  Quality issue
                  <i class="fas fa-star-half-alt reason-icon"></i>
                </label>
              </div>
              
              <div class="reason-option">
                <input type="radio" id="reason5" name="returnReason" value="Others">
                <label for="reason5">
                  Others
                  <i class="fas fa-ellipsis-h reason-icon"></i>
                </label>
              </div>
            </div>
          </div>

          <!-- Additional Details -->
          <div class="form-group">
            <label class="form-label" for="returnDescription">Additional Details (Optional)</label>
            <textarea 
              id="returnDescription" 
              name="returnDescription" 
              class="form-textarea" 
              placeholder="Please provide additional details about your return request. This will help us process your request faster and improve our service."
              rows="4"
            ></textarea>
          </div>

          <!-- Modal Actions -->
          <div class="modal-actions">
            <button type="button" class="modal-btn secondary" onclick="closeReturnModal()">
              <i class="fas fa-times"></i>
              Cancel
            </button>
            <button type="submit" class="modal-btn primary" id="submitReturnBtn">
              <i class="fas fa-paper-plane"></i>
              Submit Return Request
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Cancel Item Modal -->
  <div class="modal-overlay" id="cancelModal">
    <div class="cancel-modal" style="max-width: 450px;">
      <div class="modal-header" style="background: linear-gradient(135deg, #dc3545, #c82333);">
        <div class="modal-header-content">
          <h2 class="modal-title">
            <i class="fas fa-exclamation-triangle"></i>
            Cancel Item
          </h2>
          <p class="modal-subtitle">Are you sure you want to cancel this item?</p>
        </div>
        <button class="modal-close" onclick="closeCancelModal()">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div class="modal-body">
        <!-- Item Information Card -->
        <div class="item-info-card" id="cancelItemInfo">
          <div class="item-info-header">
            <img id="cancelItemImage" src="" alt="" class="item-info-image">
            <div class="item-info-details">
              <h4 id="cancelItemName"></h4>
              <p id="cancelItemVariant"></p>
              <p id="cancelItemQuantity"></p>
            </div>
            <div class="item-info-price" id="cancelItemPrice"></div>
          </div>
        </div>

        <div class="cancel-warning">
          <i class="fas fa-exclamation-triangle" style="color: #856404; margin-right: 8px;"></i>
          <strong>Important:</strong> Once cancelled, this action cannot be undone. Any refund will be processed according to our refund policy.
        </div>

        <!-- Modal Actions -->
        <div class="modal-actions">
          <button type="button" class="modal-btn secondary" onclick="closeCancelModal()">
            <i class="fas fa-times"></i>
            Keep Item
          </button>
          <button type="button" class="modal-btn" id="confirmCancelBtn" style="background: linear-gradient(135deg, #dc3545, #c82333); color: white;">
            <i class="fas fa-trash"></i>
            Yes, Cancel Item
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Success Toast -->
  <div class="toast" id="successToast">
    <div class="toast-content">
      <i class="fas fa-check-circle toast-icon" style="color: #28a745;"></i>
      <div>
        <div class="toast-message">Success!</div>
        <div style="font-size: 0.85rem; color: #718096;" id="toastDetails">Action completed successfully</div>
      </div>
    </div>
  </div>

  <!-- Footer Include -->
  <%- include("../partials/user/footer") %>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script>
    // Global variables for return modal
    let currentReturnOrderId = null;
    let currentReturnItemIndex = null;
    let currentReturnType = null;

    // Global variables for cancel modal
    let currentCancelOrderId = null;
    let currentCancelItemIndex = null;

    // Helper function for status icons
    function getStatusIcon(status) {
      const statusIcons = {
        'Processing': 'fas fa-cog fa-spin',
        'Pending': 'fas fa-clock',
        'Shipped': 'fas fa-truck',
        'Delivered': 'fas fa-check-circle',
        'Cancelled': 'fas fa-times-circle',
        'Return Request': 'fas fa-undo',
        'Returned': 'fas fa-box-open',
        'Return Rejected': 'fas fa-times',
        'Return Accepted': 'fas fa-check'
      };
      return statusIcons[status] || 'fas fa-info-circle';
    }

    document.addEventListener("DOMContentLoaded", () => {
      // Initialize animations
      setTimeout(() => {
        document.querySelectorAll('.animate-fade-in-up').forEach((el, index) => {
          setTimeout(() => {
            el.style.opacity = '1';
            el.style.transform = 'translateY(0)';
          }, index * 100);
        });
      }, 100);

      // Initialize return form
      initializeReturnForm();
    });

    // Updated cancelItem function - opens modal instead of using confirm
    function cancelItem(orderId, itemIndex) {
      currentCancelOrderId = orderId;
      currentCancelItemIndex = itemIndex;
      
      // Populate item info
      populateCancelItemInfo(itemIndex);
      
      // Show modal
      const modal = document.getElementById('cancelModal');
      modal.classList.add('active');
      document.body.style.overflow = 'hidden';
      
      // Add click handler to confirm button
      const confirmBtn = document.getElementById('confirmCancelBtn');
      confirmBtn.onclick = () => confirmCancelItem();
    }

    // Function to populate cancel modal with item info
    function populateCancelItemInfo(itemIndex) {
      const orderItems = <%- JSON.stringify(order.orderedItems) %>;
      const item = orderItems[itemIndex];
      
      if (item && item.product) {
        document.getElementById('cancelItemImage').src = item.product.variants && item.product.variants[item.variantIndex] 
          ? `/uploads/productImages/${item.product.variants[item.variantIndex].productImage[0]}`
          : '/placeholder.svg?height=60&width=60';
        document.getElementById('cancelItemName').textContent = item.product.productName;
        document.getElementById('cancelItemVariant').textContent = item.product.variants && item.product.variants[item.variantIndex]
          ? `Variant: ${item.product.variants[item.variantIndex].type}`
          : 'Standard variant';
        document.getElementById('cancelItemQuantity').textContent = `Quantity: ${item.quantity}`;
        document.getElementById('cancelItemPrice').textContent = `₹${(item.quantity * item.price).toFixed(2)}`;
      }
    }

    // Function to close cancel modal
    function closeCancelModal() {
      const modal = document.getElementById('cancelModal');
      modal.classList.remove('active');
      document.body.style.overflow = 'auto';
      
      // Reset global variables
      currentCancelOrderId = null;
      currentCancelItemIndex = null;
    }

    // Function to confirm cancellation
    function confirmCancelItem() {
      if (!currentCancelOrderId || currentCancelItemIndex === null) return;
      
      // Disable confirm button to prevent double-clicks
      const confirmBtn = document.getElementById('confirmCancelBtn');
      confirmBtn.disabled = true;
      confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Cancelling...';
      
      fetch('/orders', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          orderId: currentCancelOrderId,
          itemIndex: parseInt(currentCancelItemIndex),
          cancellationTitle: 'Changed mind',
          cancellationReason: 'Cancelled from order details page'
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          closeCancelModal();
          showToast('Item cancelled successfully!', 'The item has been cancelled and refund will be processed.');
          setTimeout(() => window.location.reload(), 1500);
        } else {
          showToast('Failed to cancel item', data.message || 'Please try again later.', 'error');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showToast('Failed to cancel item', 'Something went wrong. Please try again.', 'error');
      })
      .finally(() => {
        // Re-enable confirm button
        confirmBtn.disabled = false;
        confirmBtn.innerHTML = '<i class="fas fa-trash"></i> Yes, Cancel Item';
      });
    }

    // Return Modal Functions
    function openReturnModal(orderId, itemIndex, type) {
      currentReturnOrderId = orderId;
      currentReturnItemIndex = itemIndex;
      currentReturnType = type;

      const modal = document.getElementById('returnModal');
      const itemInfoCard = document.getElementById('returnItemInfo');
      
      // Show/hide item info based on return type
      if (type === 'item' && itemIndex !== null) {
        populateItemInfo(itemIndex);
        itemInfoCard.style.display = 'block';
      } else {
        itemInfoCard.style.display = 'none';
      }

      // Update modal title based on type
      const modalTitle = modal.querySelector('.modal-title');
      const modalSubtitle = modal.querySelector('.modal-subtitle');
      
      if (type === 'item') {
        modalTitle.innerHTML = '<i class="fas fa-undo"></i> Return Item';
        modalSubtitle.textContent = 'Please provide a reason for returning this item';
      } else {
        modalTitle.innerHTML = '<i class="fas fa-undo"></i> Return Order';
        modalSubtitle.textContent = 'Please provide a reason for returning this entire order';
      }

      // Reset form
      document.getElementById('returnForm').reset();
      
      // Show modal
      modal.classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    function closeReturnModal() {
      const modal = document.getElementById('returnModal');
      modal.classList.remove('active');
      document.body.style.overflow = 'auto';
      
      // Reset global variables
      currentReturnOrderId = null;
      currentReturnItemIndex = null;
      currentReturnType = null;
    }

    function populateItemInfo(itemIndex) {
      // Get item data from the page (you might need to pass this data differently)
      const orderItems = <%- JSON.stringify(order.orderedItems) %>;
      const item = orderItems[itemIndex];
      
      if (item && item.product) {
        document.getElementById('returnItemImage').src = item.product.variants && item.product.variants[item.variantIndex] 
          ? `/uploads/productImages/${item.product.variants[item.variantIndex].productImage[0]}`
          : '/placeholder.svg?height=60&width=60';
        document.getElementById('returnItemName').textContent = item.product.productName;
        document.getElementById('returnItemVariant').textContent = item.product.variants && item.product.variants[item.variantIndex]
          ? `Variant: ${item.product.variants[item.variantIndex].type}`
          : 'Standard variant';
        document.getElementById('returnItemQuantity').textContent = `Quantity: ${item.quantity}`;
        document.getElementById('returnItemPrice').textContent = `₹${(item.quantity * item.price).toFixed(2)}`;
      }
    }

    function initializeReturnForm() {
      const returnForm = document.getElementById('returnForm');
      
      returnForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(returnForm);
        const returnReason = formData.get('returnReason');
        const returnDescription = formData.get('returnDescription');
        
        if (!returnReason) {
          showToast('Please select a return reason', 'A return reason is required to process your request.', 'error');
          return;
        }
        
        // Disable submit button
        const submitBtn = document.getElementById('submitReturnBtn');
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
        
        // Submit return request
        submitReturnRequest(returnReason, returnDescription);
      });
    }

    function submitReturnRequest(reason, description) {
      const endpoint = currentReturnType === 'item' 
        ? `/returnItem/${currentReturnOrderId}/${currentReturnItemIndex}`
        : `/returnOrder/${currentReturnOrderId}`;
      
      const requestData = {
        returnTitle: reason,
        returnReason: description || '',
        itemIndex: currentReturnItemIndex
      };

      fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestData)
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          closeReturnModal();
          showToast(
            'Return request submitted!', 
            `Your ${currentReturnType} return request has been submitted successfully. We will process it within 24-48 hours.`
          );
          setTimeout(() => window.location.reload(), 2000);
        } else {
          showToast('Return request failed', data.message || 'Please try again later.', 'error');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showToast('Return request failed', 'Something went wrong. Please try again.', 'error');
      })
      .finally(() => {
        // Re-enable submit button
        const submitBtn = document.getElementById('submitReturnBtn');
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Return Request';
      });
    }

    // Close modal when clicking outside
    document.getElementById('returnModal').addEventListener('click', function(e) {
      if (e.target === this) {
        closeReturnModal();
      }
    });

    // Close cancel modal when clicking outside
    document.getElementById('cancelModal').addEventListener('click', function(e) {
      if (e.target === this) {
        closeCancelModal();
      }
    });

    // Close modal with Escape key (update existing handler to include cancel modal)
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        if (document.getElementById('cancelModal').classList.contains('active')) {
          closeCancelModal();
        } else if (document.getElementById('returnModal').classList.contains('active')) {
          closeReturnModal();
        }
      }
    });

     // Retry Payment Functionality
  document.addEventListener('DOMContentLoaded', function() {
    const retryBtn = document.getElementById('retryPaymentBtn');
    
    if (retryBtn) {
      retryBtn.addEventListener('click', handleRetryPayment);
    }
  });

async function handleRetryPayment() {
    const retryBtn = document.getElementById('retryPaymentBtn');
    const orderId = '<%= order._id %>';
    
    try {
      
      retryBtn.classList.add('btn-loading');
      retryBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
      
      showToast('Preparing payment retry...', 'Please wait while we set up your payment.', 'info');
      
      
      const response = await fetch(`/orders/${orderId}/retry-payment`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      const data = await response.json();
      console.log(data);
      
      
      // Reset button state
      retryBtn.classList.remove('btn-loading');
      retryBtn.innerHTML = '<i class="fas fa-redo-alt"></i> Retry Payment';
      
      if (data.success) {
        // Initialize Razorpay payment
        const options = {
          key: data.razorpayKey,
          amount: data.amount,
          currency: "INR",
          name: "ShadElectro",
          description: "Retry Payment for Order #<%= order.orderId.substring(0, 8).toUpperCase() %>",
          order_id: data.orderId,
          handler: async function(response) {
            try {
              showToast('Verifying payment...', 'Please wait while we confirm your payment.', 'info');
              
             
              const verifyResponse = await fetch('/verify-retry-payment', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  razorpay_order_id: response.razorpay_order_id,
                  razorpay_payment_id: response.razorpay_payment_id,
                  razorpay_signature: response.razorpay_signature,
                  orderId: orderId
                })
              });
              
              const verifyData = await verifyResponse.json();
              
              if (verifyData.success) {
                showToast('Payment successful!', 'Your payment has been processed successfully. Redirecting...', 'success');
                setTimeout(() => {
                  window.location.reload();
                }, 2000);
              } else {
                showToast('Payment verification failed', verifyData.message || 'Please try again or contact support.', 'error');
              }
            } catch (error) {
              console.error('Verification error:', error);
              showToast('Payment verification failed', 'Please contact support with your payment details.', 'error');
            }
          },
          modal: {
            ondismiss: function() {
              showToast('Payment cancelled', 'You can retry payment anytime from this page.', 'info');
            }
          },
          prefill: {
            name: data.customer.name,
            email: data.customer.email,
            contact: data.customer.phone
          },
          theme: {
            color: "#8a2be2"
          },
          retry: {
            enabled: true,
            max_count: 3
          }
        };
        
        const rzp = new Razorpay(options);
        
        // Handle payment failure
        rzp.on('payment.failed', function (response) {
          console.error('Payment failed:', response.error);
          showToast('Payment failed', response.error.description || 'Please try again or use a different payment method.', 'error');
        });
        
        rzp.open();
        
      } else {
        showToast('Unable to retry payment', data.message || 'Please refresh the page and try again.', 'error');
      }
      
    } catch (error) {
      // Reset button state
      retryBtn.classList.remove('btn-loading');
      retryBtn.innerHTML = '<i class="fas fa-redo-alt"></i> Retry Payment';
      
      console.error('Retry payment error:', error);
      showToast('Error preparing payment', 'Something went wrong', 'error');
    }
  }

function showToast(message, details = '', type = 'success') {
    const toast = document.getElementById('successToast');
    const messageElement = toast.querySelector('.toast-message');
    const detailsElement = document.getElementById('toastDetails');
    const icon = toast.querySelector('.toast-icon');
    
    // Set message based on type
    if (type === 'success') {
      messageElement.textContent = 'Success!';
      icon.className = 'fas fa-check-circle toast-icon';
      icon.style.color = '#28a745';
      toast.classList.remove('error');
    } else if (type === 'error') {
      messageElement.textContent = 'Error!';
      icon.className = 'fas fa-exclamation-circle toast-icon';
      icon.style.color = '#dc3545';
      toast.classList.add('error');
    } else if (type === 'info') {
      messageElement.textContent = 'Processing...';
      icon.className = 'fas fa-info-circle toast-icon';
      icon.style.color = '#17a2b8';
      toast.classList.remove('error');
    }
    
    detailsElement.textContent = details || message;
    
    toast.classList.add('show');
    
    // Auto hide after appropriate time based on type
    const hideTime = type === 'info' ? 3000 : 4000;
    setTimeout(() => {
      toast.classList.remove('show');
    }, hideTime);
  }

    // Enhanced invoice functions
    function emailInvoice(orderId) {
      window.location=`/orderInvoice/${orderId}`
    }

    function printInvoice(orderId) {
      // Open invoice in new window for printing
      const printWindow = window.open(`/api/orders/${orderId}/invoice?print=true`, '_blank');
      
      if (printWindow) {
        printWindow.onload = function() {
          setTimeout(() => {
            printWindow.print();
          }, 500);
        };
        showToast('Opening print dialog...', 'Invoice will open in a new window for printing.');
      } else {
        showToast('Popup blocked', 'Please allow popups to print the invoice.', 'error');
      }
    }

    function cancelEntireOrder(orderId) {
      if (!confirm('Are you sure you want to cancel this entire order? This action cannot be undone.')) return;
      
      fetch(`/api/orders/${orderId}/cancel`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showToast('Order cancelled successfully!', 'Your order has been cancelled and refund will be processed.');
          setTimeout(() => window.location.reload(), 1500);
        } else {
          showToast('Failed to cancel order', data.message || 'Please try again later.', 'error');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showToast('Failed to cancel order', 'Something went wrong. Please try again.', 'error');
      });
    }

    function reorderItems(orderId) {
      fetch(`/api/orders/${orderId}/reorder`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showToast('Items added to cart!', 'All available items have been added to your cart.');
          setTimeout(() => window.location.href = '/cart', 1500);
        } else {
          showToast('Failed to reorder items', data.message || 'Some items may not be available.', 'error');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showToast('Failed to reorder items', 'Something went wrong. Please try again.', 'error');
      });
    }

    function isValidEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }
  </script>
</body>
</html>
